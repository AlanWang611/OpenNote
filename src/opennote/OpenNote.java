/*
 * First notepad program I have ever written! Don't judge please :3
 */
package opennote;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.PrintWriter;
import java.net.MalformedURLException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * Just your average OpenNote program.
 * 
 * @author Kevin Chen
 */
public class OpenNote extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame2
     */
    public OpenNote() {
        JFrame.setDefaultLookAndFeelDecorated(true);
        initComponents();
        windowManagement();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        text_scroll_pane = new javax.swing.JScrollPane();
        text_area = new javax.swing.JTextArea();
        menu_bar = new javax.swing.JMenuBar();
        file_menu = new javax.swing.JMenu();
        new_option = new javax.swing.JMenuItem();
        open_option = new javax.swing.JMenuItem();
        save_option = new javax.swing.JMenuItem();
        saveas_option = new javax.swing.JMenuItem();
        exit_option = new javax.swing.JMenuItem();
        edit_menu = new javax.swing.JMenu();
        undo_option = new javax.swing.JMenuItem();
        redo_option = new javax.swing.JMenuItem();
        preferences_option = new javax.swing.JMenuItem();
        help_menu = new javax.swing.JMenu();
        update_option = new javax.swing.JMenuItem();
        about_option = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        text_area.setEditable(false);
        text_area.setColumns(20);
        text_area.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        text_area.setRows(5);
        text_scroll_pane.setViewportView(text_area);

        getContentPane().add(text_scroll_pane);

        file_menu.setText("File");

        new_option.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        new_option.setIcon(new javax.swing.ImageIcon(getClass().getResource("/opennote/menu_icons/new.png"))); // NOI18N
        new_option.setText("New");
        new_option.setToolTipText("Creates a new file.");
        new_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                new_optionActionPerformed(evt);
            }
        });
        file_menu.add(new_option);

        open_option.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        open_option.setIcon(new javax.swing.ImageIcon(getClass().getResource("/opennote/menu_icons/open.png"))); // NOI18N
        open_option.setText("Open");
        open_option.setToolTipText("Opens an existing file.");
        open_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                open_optionActionPerformed(evt);
            }
        });
        file_menu.add(open_option);

        save_option.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        save_option.setIcon(new javax.swing.ImageIcon(getClass().getResource("/opennote/menu_icons/save.png"))); // NOI18N
        save_option.setText("Save");
        save_option.setToolTipText("Saves the current file in the same location as the original.");
        save_option.setEnabled(false);
        save_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_optionActionPerformed(evt);
            }
        });
        file_menu.add(save_option);

        saveas_option.setIcon(new javax.swing.ImageIcon(getClass().getResource("/opennote/menu_icons/save_as.png"))); // NOI18N
        saveas_option.setText("Save as");
        saveas_option.setToolTipText("Saves the current file in a location that you choose.");
        saveas_option.setEnabled(false);
        saveas_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveas_optionActionPerformed(evt);
            }
        });
        file_menu.add(saveas_option);

        exit_option.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exit_option.setIcon(new javax.swing.ImageIcon(getClass().getResource("/opennote/menu_icons/exit.png"))); // NOI18N
        exit_option.setText("Exit");
        exit_option.setToolTipText("Exits the program.");
        exit_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit_optionActionPerformed(evt);
            }
        });
        file_menu.add(exit_option);

        menu_bar.add(file_menu);

        edit_menu.setText("Edit");

        undo_option.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undo_option.setIcon(new javax.swing.ImageIcon(getClass().getResource("/opennote/menu_icons/undo.png"))); // NOI18N
        undo_option.setText("Undo");
        undo_option.setToolTipText("Reverts the text to a previous state.");
        undo_option.setEnabled(false);
        undo_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undo_optionActionPerformed(evt);
            }
        });
        edit_menu.add(undo_option);

        redo_option.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        redo_option.setIcon(new javax.swing.ImageIcon(getClass().getResource("/opennote/menu_icons/redo.png"))); // NOI18N
        redo_option.setText("Redo");
        redo_option.setToolTipText("Reverts back to a previous edit.");
        redo_option.setEnabled(false);
        redo_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redo_optionActionPerformed(evt);
            }
        });
        edit_menu.add(redo_option);

        preferences_option.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        preferences_option.setIcon(new javax.swing.ImageIcon(getClass().getResource("/opennote/menu_icons/preferences.png"))); // NOI18N
        preferences_option.setText("Preferences");
        preferences_option.setToolTipText("Changes the preferences.");
        preferences_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preferences_optionActionPerformed(evt);
            }
        });
        edit_menu.add(preferences_option);

        menu_bar.add(edit_menu);

        help_menu.setText("Help");

        update_option.setIcon(new javax.swing.ImageIcon(getClass().getResource("/opennote/menu_icons/update.png"))); // NOI18N
        update_option.setText("Check for Updates");
        update_option.setToolTipText("Checks online for updates to the program.");
        update_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_optionActionPerformed(evt);
            }
        });
        help_menu.add(update_option);

        about_option.setIcon(new javax.swing.ImageIcon(getClass().getResource("/opennote/menu_icons/about.png"))); // NOI18N
        about_option.setText("About");
        about_option.setToolTipText("About OpenNote");
        about_option.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                about_optionActionPerformed(evt);
            }
        });
        help_menu.add(about_option);

        menu_bar.add(help_menu);

        setJMenuBar(menu_bar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void redo_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redo_optionActionPerformed
        String txt = text_area_listener.readRedo();
        if(txt != null)
        {
            text_area.setText(txt);
            text_area_listener.push(txt);
        }
    }//GEN-LAST:event_redo_optionActionPerformed

    private void update_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_optionActionPerformed
        /*
        2
        */
        java.net.URL upd;
        String output_text = "Could not connect to the internet. Try again later.";
        final javax.swing.ImageIcon ico = new javax.swing.ImageIcon(getClass().getResource("/opennote/menu_icons/update.png"));
        
        try {
            upd = new java.net.URL("https://opennote-app.firebaseapp.com/dist/ver_info.txt");
            java.util.Scanner in = new java.util.Scanner(upd.openStream());
            
            String line = in.nextLine();
            if(java.util.regex.Pattern.matches("current_ver=[0-9]+",line))
            {
                line = line.substring(line.indexOf("=")+1);
                int ver = Integer.parseInt(line);
                
                line = in.nextLine();
                String ver_code = line.substring(line.indexOf("=")+1);
                if(ver > PRGM_VER)
                    output_text = "There is a new version available!\n OpenNote "+ver_code+"\nYou currently have version "+VER_CODE
                                  +"\nGet the new version here: https://opennote-app.firebaseapp.com/dist/OpenNote"+ver_code+".jar";
                else
                    output_text = "There is no new version available at this time.\n OpenNote "+ ver_code;   
            }

                
        } catch (MalformedURLException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        
        JOptionPane.showMessageDialog(null,
                    output_text,
                    "Updater", JOptionPane.INFORMATION_MESSAGE, ico);
    }//GEN-LAST:event_update_optionActionPerformed

    private void about_optionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_about_optionActionPerformed
        final javax.swing.ImageIcon ico = new javax.swing.ImageIcon(getClass().getResource("/opennote/icon.png"));
        JOptionPane.showMessageDialog(this, "OpenNote "+VER_CODE+"\nOpen source, crowd-sourced, text editor and viewer\n\n"
                                        + "Authors:\nKevin Chen", "About OpenNote",
                                        JOptionPane.PLAIN_MESSAGE,ico);
    }//GEN-LAST:event_about_optionActionPerformed

    private void undo_optionActionPerformed(java.awt.event.ActionEvent evt) {
        text_area_listener.pop();
        text_area.setText(text_area_listener.peek());
    }

    private void saveas_optionActionPerformed(java.awt.event.ActionEvent evt) {
        if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            f = fc.getSelectedFile();
            saveFile();
        }

        if (f != null) {
            save_option.setEnabled(true);
            updateName(f.getName());
        }

        is_new_document = false;
    }

    private void preferences_optionActionPerformed(java.awt.event.ActionEvent evt) {
        comingSoon("Preferences");
    }

    private void open_optionActionPerformed(java.awt.event.ActionEvent evt) {

        checkModified();

        // Generates open dialog and reads in a file
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            FileReader fr = null;
            try {
                f = fc.getSelectedFile();
                fr = new FileReader(f);
                updateName(f.getName());

            } catch (FileNotFoundException e) {
                JOptionPane.showMessageDialog(this, "The file \"" + f.getName() + "\" could not be found!",
                        "Invalid File", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Reads in the file line-by-line
            BufferedReader br = new BufferedReader(fr);
            StringBuilder sb = new StringBuilder();
            String line = "";
            try {
                while ((line = br.readLine()) != null) {
                    sb.append(line);
                    if (line.equals(""))
                        sb.append("\n");
                    sb.append("\n");
                }
            } catch (IOException ex) {
                Logger.getLogger(OpenNote.class.getName()).log(Level.SEVERE, null, ex);
            }

            // Gets rid of the unnecessary last "\n" appended to the end of the read-in
            // string
            opened_file_txt = sb.toString().substring(0, sb.length() - 1);
            if (sb.length() > 0)
                text_area.setText(opened_file_txt);

            // Check that the file is read-only and enable menu options based off of this.
            if (f.canWrite()) {
                text_area.setEditable(true);
                save_option.setEnabled(true);
                undo_option.setEnabled(true);
                redo_option.setEnabled(true);
            } else {
                text_area.setEditable(false);
                save_option.setEnabled(false);
                undo_option.setEnabled(false);
                redo_option.setEnabled(false);
                JOptionPane.showMessageDialog(this, f.getName() + " is read-only.", "Warning",
                        JOptionPane.WARNING_MESSAGE);
            }
            saveas_option.setEnabled(true);

            try {
                fr.close();
                br.close();
            } catch (IOException ex) {
                Logger.getLogger(OpenNote.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        is_new_document = false;

    }

    private void save_optionActionPerformed(java.awt.event.ActionEvent evt) {
        saveFile();
        is_new_document = false;
    }

    private void exit_optionActionPerformed(java.awt.event.ActionEvent evt) {
        // Exits the program.
        if (!is_new_document || is_new_document && !text_area.getText().equals(""))
            checkModified();
        System.exit(0);
    }

    private void new_optionActionPerformed(java.awt.event.ActionEvent evt) {
        if (!is_new_document || is_new_document && !text_area.getText().equals(""))
            checkModified();
        updateName("New Note");
        text_area.setText("");
        text_area.setEditable(true);
        save_option.setEnabled(false);
        saveas_option.setEnabled(true);
        undo_option.setEnabled(true);
        redo_option.setEnabled(true);
        opened_file_txt = "";
        f = null;
        is_new_document = true;
    }

    public void updateName(String name) {
        opened_file_name = name;
        this.setTitle(opened_file_name + " - OpenNote");
    }

    public void checkModified() {
        // If the file has been changed
        if (!opened_file_txt.equals(text_area.getText())) {
            int dialog_response = JOptionPane.showConfirmDialog(null,
                    "You have unsaved changes to " + opened_file_name + ". Would you like to save these changes?",
                    "File Changed", JOptionPane.YES_NO_OPTION);
            if (dialog_response == JOptionPane.YES_OPTION)
                saveFile();

        }
    }

    public void saveFile() {
        // If there is a file currently loaded
        if (f != null) {
            try {
                try (PrintWriter out = new PrintWriter(f.getPath())) {
                    out.print(text_area.getText());
                }
            } catch (FileNotFoundException e) {
                Logger.getLogger(OpenNote.class.getName()).log(Level.SEVERE, null, e);
            }
        }
    }

    public void comingSoon(String feature) {
        JOptionPane.showMessageDialog(this, "Feature not yet implemented, coming in a future update!", feature,
                JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Metal look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Metal (introduced in Java SE 6) is not available, stay with the default
         * look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OpenNote.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OpenNote.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OpenNote.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OpenNote.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OpenNote().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem about_option;
    private javax.swing.JMenu edit_menu;
    private javax.swing.JMenuItem exit_option;
    private javax.swing.JMenu file_menu;
    private javax.swing.JMenu help_menu;
    private javax.swing.JMenuBar menu_bar;
    private javax.swing.JMenuItem new_option;
    private javax.swing.JMenuItem open_option;
    private javax.swing.JMenuItem preferences_option;
    private javax.swing.JMenuItem redo_option;
    private javax.swing.JMenuItem save_option;
    private javax.swing.JMenuItem saveas_option;
    private javax.swing.JTextArea text_area;
    private javax.swing.JScrollPane text_scroll_pane;
    private javax.swing.JMenuItem undo_option;
    private javax.swing.JMenuItem update_option;
    // End of variables declaration//GEN-END:variables
    private final Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    private final JFileChooser fc = new JFileChooser();
    private File f;
    private String opened_file_txt = "";
    private String opened_file_name = "";
    private boolean is_new_document = true;
    private final DocumentChanges text_area_listener = new DocumentChanges();
    public final int PRGM_VER = 1;
    public final String VER_CODE = "1.0";

    public void windowManagement() {

        // Makes the window generate in the middle of the screen
        this.setLocationRelativeTo(null);

        // Sets minimum size to half of the dimensions of the screen
        this.setMinimumSize(new Dimension(screenSize.width / 2, screenSize.height / 2));

        // Setting the icon
        try {
            this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icon.png")));
        } catch (NullPointerException e) {
        }

        // Setting the title
        this.setTitle("OpenNote");
        
        //Adding a document listener to text area
        text_area.getDocument().addDocumentListener(text_area_listener);

    }
}
